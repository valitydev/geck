package dev.vality.geck.serializer.domain;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.nio.ByteBuffer;
import java.util.*;

@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2020-07-09")
public class TestObject implements org.apache.thrift.TBase<TestObject, TestObject._Fields>, java.io.Serializable, Cloneable, Comparable<TestObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestObject");

  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numbers", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SET_IN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("set_in_list", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("maps", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField KEBAB_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("kebabMap", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField ANOTHER_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("another_string", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new TestObjectStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new TestObjectTupleSchemeFactory();

  public Ids ids; // required
  public double value; // required
  public String description; // optional
  public ByteBuffer data; // optional
  public List<Integer> numbers; // required
  public Status status; // required
  public List<Set<String>> set_in_list; // required
  public Map<String,Integer> maps; // optional
  public List<Status> statuses; // optional
  public boolean active; // required
  public Map<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>> kebabMap; // required
  public String another_string; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDS((short)1, "ids"),
    VALUE((short)2, "value"),
    DESCRIPTION((short)3, "description"),
    DATA((short)4, "data"),
    NUMBERS((short)5, "numbers"),
    STATUS((short)6, "status"),
    SET_IN_LIST((short)7, "set_in_list"),
    MAPS((short)8, "maps"),
    STATUSES((short)9, "statuses"),
    ACTIVE((short)10, "active"),
    KEBAB_MAP((short)11, "kebabMap"),
    ANOTHER_STRING((short)12, "another_string");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDS
          return IDS;
        case 2: // VALUE
          return VALUE;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // DATA
          return DATA;
        case 5: // NUMBERS
          return NUMBERS;
        case 6: // STATUS
          return STATUS;
        case 7: // SET_IN_LIST
          return SET_IN_LIST;
        case 8: // MAPS
          return MAPS;
        case 9: // STATUSES
          return STATUSES;
        case 10: // ACTIVE
          return ACTIVE;
        case 11: // KEBAB_MAP
          return KEBAB_MAP;
        case 12: // ANOTHER_STRING
          return ANOTHER_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private static final int __ACTIVE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESCRIPTION, _Fields.DATA, _Fields.MAPS, _Fields.STATUSES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Ids.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("numbers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class)));
    tmpMap.put(_Fields.SET_IN_LIST, new org.apache.thrift.meta_data.FieldMetaData("set_in_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.MAPS, new org.apache.thrift.meta_data.FieldMetaData("maps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class))));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEBAB_MAP, new org.apache.thrift.meta_data.FieldMetaData("kebabMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Enums.class)), 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class)), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class), 
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Ids.class))))));
    tmpMap.put(_Fields.ANOTHER_STRING, new org.apache.thrift.meta_data.FieldMetaData("another_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestObject.class, metaDataMap);
  }

  public TestObject() {
  }

  public TestObject(
    Ids ids,
    double value,
    List<Integer> numbers,
    Status status,
    List<Set<String>> set_in_list,
    boolean active,
    Map<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>> kebabMap,
    String another_string)
  {
    this();
    this.ids = ids;
    this.value = value;
    setValueIsSet(true);
    this.numbers = numbers;
    this.status = status;
    this.set_in_list = set_in_list;
    this.active = active;
    setActiveIsSet(true);
    this.kebabMap = kebabMap;
    this.another_string = another_string;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestObject(TestObject other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIds()) {
      this.ids = new Ids(other.ids);
    }
    this.value = other.value;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
    }
    if (other.isSetNumbers()) {
      List<Integer> __this__numbers = new ArrayList<Integer>(other.numbers);
      this.numbers = __this__numbers;
    }
    if (other.isSetStatus()) {
      this.status = new Status(other.status);
    }
    if (other.isSetSetInList()) {
      List<Set<String>> __this__set_in_list = new ArrayList<Set<String>>(other.set_in_list.size());
      for (Set<String> other_element : other.set_in_list) {
        Set<String> __this__set_in_list_copy = new HashSet<String>(other_element);
        __this__set_in_list.add(__this__set_in_list_copy);
      }
      this.set_in_list = __this__set_in_list;
    }
    if (other.isSetMaps()) {
      Map<String,Integer> __this__maps = new HashMap<String,Integer>(other.maps);
      this.maps = __this__maps;
    }
    if (other.isSetStatuses()) {
      List<Status> __this__statuses = new ArrayList<Status>(other.statuses.size());
      for (Status other_element : other.statuses) {
        __this__statuses.add(other_element);
      }
      this.statuses = __this__statuses;
    }
    this.active = other.active;
    if (other.isSetKebabMap()) {
      Map<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>> __this__kebabMap = new HashMap<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>>(other.kebabMap.size());
      for (Map.Entry<Map<Set<Enums>,Status>, Map<Status,Set<Ids>>> other_element : other.kebabMap.entrySet()) {

        Map<Set<Enums>,Status> other_element_key = other_element.getKey();
        Map<Status,Set<Ids>> other_element_value = other_element.getValue();

        Map<Set<Enums>,Status> __this__kebabMap_copy_key = new HashMap<Set<Enums>,Status>(other_element_key.size());
        for (Map.Entry<Set<Enums>, Status> other_element_key_element : other_element_key.entrySet()) {

          Set<Enums> other_element_key_element_key = other_element_key_element.getKey();
          Status other_element_key_element_value = other_element_key_element.getValue();

          Set<Enums> __this__kebabMap_copy_key_copy_key = new HashSet<Enums>(other_element_key_element_key.size());
          for (Enums other_element_key_element_key_element : other_element_key_element_key) {
            __this__kebabMap_copy_key_copy_key.add(other_element_key_element_key_element);
          }

          Status __this__kebabMap_copy_key_copy_value = other_element_key_element_value;

          __this__kebabMap_copy_key.put(__this__kebabMap_copy_key_copy_key, __this__kebabMap_copy_key_copy_value);
        }

        Map<Status,Set<Ids>> __this__kebabMap_copy_value = new HashMap<Status,Set<Ids>>(other_element_value.size());
        for (Map.Entry<Status, Set<Ids>> other_element_value_element : other_element_value.entrySet()) {

          Status other_element_value_element_key = other_element_value_element.getKey();
          Set<Ids> other_element_value_element_value = other_element_value_element.getValue();

          Status __this__kebabMap_copy_value_copy_key = other_element_value_element_key;

          Set<Ids> __this__kebabMap_copy_value_copy_value = new HashSet<Ids>(other_element_value_element_value.size());
          for (Ids other_element_value_element_value_element : other_element_value_element_value) {
            __this__kebabMap_copy_value_copy_value.add(other_element_value_element_value_element);
          }

          __this__kebabMap_copy_value.put(__this__kebabMap_copy_value_copy_key, __this__kebabMap_copy_value_copy_value);
        }

        __this__kebabMap.put(__this__kebabMap_copy_key, __this__kebabMap_copy_value);
      }
      this.kebabMap = __this__kebabMap;
    }
    if (other.isSetAnotherString()) {
      this.another_string = other.another_string;
    }
  }

  public TestObject deepCopy() {
    return new TestObject(this);
  }

  @Override
  public void clear() {
    this.ids = null;
    setValueIsSet(false);
    this.value = 0.0;
    this.description = null;
    this.data = null;
    this.numbers = null;
    this.status = null;
    this.set_in_list = null;
    this.maps = null;
    this.statuses = null;
    setActiveIsSet(false);
    this.active = false;
    this.kebabMap = null;
    this.another_string = null;
  }

  public Ids getIds() {
    return this.ids;
  }

  public TestObject setIds(Ids ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public double getValue() {
    return this.value;
  }

  public TestObject setValue(double value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public TestObject setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  public TestObject setData(byte[] data) {
    this.data = data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(data, data.length));
    return this;
  }

  public TestObject setData(ByteBuffer data) {
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getNumbersSize() {
    return (this.numbers == null) ? 0 : this.numbers.size();
  }

  public java.util.Iterator<Integer> getNumbersIterator() {
    return (this.numbers == null) ? null : this.numbers.iterator();
  }

  public void addToNumbers(int elem) {
    if (this.numbers == null) {
      this.numbers = new ArrayList<Integer>();
    }
    this.numbers.add(elem);
  }

  public List<Integer> getNumbers() {
    return this.numbers;
  }

  public TestObject setNumbers(List<Integer> numbers) {
    this.numbers = numbers;
    return this;
  }

  public void unsetNumbers() {
    this.numbers = null;
  }

  /** Returns true if field numbers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumbers() {
    return this.numbers != null;
  }

  public void setNumbersIsSet(boolean value) {
    if (!value) {
      this.numbers = null;
    }
  }

  public Status getStatus() {
    return this.status;
  }

  public TestObject setStatus(Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getSetInListSize() {
    return (this.set_in_list == null) ? 0 : this.set_in_list.size();
  }

  public java.util.Iterator<Set<String>> getSetInListIterator() {
    return (this.set_in_list == null) ? null : this.set_in_list.iterator();
  }

  public void addToSetInList(Set<String> elem) {
    if (this.set_in_list == null) {
      this.set_in_list = new ArrayList<Set<String>>();
    }
    this.set_in_list.add(elem);
  }

  public List<Set<String>> getSetInList() {
    return this.set_in_list;
  }

  public TestObject setSetInList(List<Set<String>> set_in_list) {
    this.set_in_list = set_in_list;
    return this;
  }

  public void unsetSetInList() {
    this.set_in_list = null;
  }

  /** Returns true if field set_in_list is set (has been assigned a value) and false otherwise */
  public boolean isSetSetInList() {
    return this.set_in_list != null;
  }

  public void setSetInListIsSet(boolean value) {
    if (!value) {
      this.set_in_list = null;
    }
  }

  public int getMapsSize() {
    return (this.maps == null) ? 0 : this.maps.size();
  }

  public void putToMaps(String key, int val) {
    if (this.maps == null) {
      this.maps = new HashMap<String,Integer>();
    }
    this.maps.put(key, val);
  }

  public Map<String,Integer> getMaps() {
    return this.maps;
  }

  public TestObject setMaps(Map<String,Integer> maps) {
    this.maps = maps;
    return this;
  }

  public void unsetMaps() {
    this.maps = null;
  }

  /** Returns true if field maps is set (has been assigned a value) and false otherwise */
  public boolean isSetMaps() {
    return this.maps != null;
  }

  public void setMapsIsSet(boolean value) {
    if (!value) {
      this.maps = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public java.util.Iterator<Status> getStatusesIterator() {
    return (this.statuses == null) ? null : this.statuses.iterator();
  }

  public void addToStatuses(Status elem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<Status>();
    }
    this.statuses.add(elem);
  }

  public List<Status> getStatuses() {
    return this.statuses;
  }

  public TestObject setStatuses(List<Status> statuses) {
    this.statuses = statuses;
    return this;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  public boolean isActive() {
    return this.active;
  }

  public TestObject setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public int getKebabMapSize() {
    return (this.kebabMap == null) ? 0 : this.kebabMap.size();
  }

  public void putToKebabMap(Map<Set<Enums>,Status> key, Map<Status,Set<Ids>> val) {
    if (this.kebabMap == null) {
      this.kebabMap = new HashMap<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>>();
    }
    this.kebabMap.put(key, val);
  }

  public Map<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>> getKebabMap() {
    return this.kebabMap;
  }

  public TestObject setKebabMap(Map<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>> kebabMap) {
    this.kebabMap = kebabMap;
    return this;
  }

  public void unsetKebabMap() {
    this.kebabMap = null;
  }

  /** Returns true if field kebabMap is set (has been assigned a value) and false otherwise */
  public boolean isSetKebabMap() {
    return this.kebabMap != null;
  }

  public void setKebabMapIsSet(boolean value) {
    if (!value) {
      this.kebabMap = null;
    }
  }

  public String getAnotherString() {
    return this.another_string;
  }

  public TestObject setAnotherString(String another_string) {
    this.another_string = another_string;
    return this;
  }

  public void unsetAnotherString() {
    this.another_string = null;
  }

  /** Returns true if field another_string is set (has been assigned a value) and false otherwise */
  public boolean isSetAnotherString() {
    return this.another_string != null;
  }

  public void setAnotherStringIsSet(boolean value) {
    if (!value) {
      this.another_string = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((Ids)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Double)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        if (value instanceof byte[]) {
          setData((byte[])value);
        } else {
          setData((ByteBuffer)value);
        }
      }
      break;

    case NUMBERS:
      if (value == null) {
        unsetNumbers();
      } else {
        setNumbers((List<Integer>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case SET_IN_LIST:
      if (value == null) {
        unsetSetInList();
      } else {
        setSetInList((List<Set<String>>)value);
      }
      break;

    case MAPS:
      if (value == null) {
        unsetMaps();
      } else {
        setMaps((Map<String,Integer>)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((List<Status>)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Boolean)value);
      }
      break;

    case KEBAB_MAP:
      if (value == null) {
        unsetKebabMap();
      } else {
        setKebabMap((Map<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>>)value);
      }
      break;

    case ANOTHER_STRING:
      if (value == null) {
        unsetAnotherString();
      } else {
        setAnotherString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDS:
      return getIds();

    case VALUE:
      return getValue();

    case DESCRIPTION:
      return getDescription();

    case DATA:
      return getData();

    case NUMBERS:
      return getNumbers();

    case STATUS:
      return getStatus();

    case SET_IN_LIST:
      return getSetInList();

    case MAPS:
      return getMaps();

    case STATUSES:
      return getStatuses();

    case ACTIVE:
      return isActive();

    case KEBAB_MAP:
      return getKebabMap();

    case ANOTHER_STRING:
      return getAnotherString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDS:
      return isSetIds();
    case VALUE:
      return isSetValue();
    case DESCRIPTION:
      return isSetDescription();
    case DATA:
      return isSetData();
    case NUMBERS:
      return isSetNumbers();
    case STATUS:
      return isSetStatus();
    case SET_IN_LIST:
      return isSetSetInList();
    case MAPS:
      return isSetMaps();
    case STATUSES:
      return isSetStatuses();
    case ACTIVE:
      return isSetActive();
    case KEBAB_MAP:
      return isSetKebabMap();
    case ANOTHER_STRING:
      return isSetAnotherString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestObject)
      return this.equals((TestObject)that);
    return false;
  }

  public boolean equals(TestObject that) {
    if (that == null)
      return false;

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_numbers = true && this.isSetNumbers();
    boolean that_present_numbers = true && that.isSetNumbers();
    if (this_present_numbers || that_present_numbers) {
      if (!(this_present_numbers && that_present_numbers))
        return false;
      if (!this.numbers.equals(that.numbers))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_set_in_list = true && this.isSetSetInList();
    boolean that_present_set_in_list = true && that.isSetSetInList();
    if (this_present_set_in_list || that_present_set_in_list) {
      if (!(this_present_set_in_list && that_present_set_in_list))
        return false;
      if (!this.set_in_list.equals(that.set_in_list))
        return false;
    }

    boolean this_present_maps = true && this.isSetMaps();
    boolean that_present_maps = true && that.isSetMaps();
    if (this_present_maps || that_present_maps) {
      if (!(this_present_maps && that_present_maps))
        return false;
      if (!this.maps.equals(that.maps))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_kebabMap = true && this.isSetKebabMap();
    boolean that_present_kebabMap = true && that.isSetKebabMap();
    if (this_present_kebabMap || that_present_kebabMap) {
      if (!(this_present_kebabMap && that_present_kebabMap))
        return false;
      if (!this.kebabMap.equals(that.kebabMap))
        return false;
    }

    boolean this_present_another_string = true && this.isSetAnotherString();
    boolean that_present_another_string = true && that.isSetAnotherString();
    if (this_present_another_string || that_present_another_string) {
      if (!(this_present_another_string && that_present_another_string))
        return false;
      if (!this.another_string.equals(that.another_string))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIds()) ? 131071 : 524287);
    if (isSetIds())
      hashCode = hashCode * 8191 + ids.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(value);

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isSetNumbers()) ? 131071 : 524287);
    if (isSetNumbers())
      hashCode = hashCode * 8191 + numbers.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetSetInList()) ? 131071 : 524287);
    if (isSetSetInList())
      hashCode = hashCode * 8191 + set_in_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaps()) ? 131071 : 524287);
    if (isSetMaps())
      hashCode = hashCode * 8191 + maps.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatuses()) ? 131071 : 524287);
    if (isSetStatuses())
      hashCode = hashCode * 8191 + statuses.hashCode();

    hashCode = hashCode * 8191 + ((active) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKebabMap()) ? 131071 : 524287);
    if (isSetKebabMap())
      hashCode = hashCode * 8191 + kebabMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnotherString()) ? 131071 : 524287);
    if (isSetAnotherString())
      hashCode = hashCode * 8191 + another_string.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumbers()).compareTo(other.isSetNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numbers, other.numbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetInList()).compareTo(other.isSetSetInList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetInList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_in_list, other.set_in_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaps()).compareTo(other.isSetMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maps, other.maps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKebabMap()).compareTo(other.isSetKebabMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKebabMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kebabMap, other.kebabMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnotherString()).compareTo(other.isSetAnotherString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnotherString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.another_string, other.another_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public _Fields[] getFields() {
    return _Fields.values();
  }

  public Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
    return metaDataMap;
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestObject(");
    boolean first = true;

    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      sb.append(this.ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("numbers:");
    if (this.numbers == null) {
      sb.append("null");
    } else {
      sb.append(this.numbers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("set_in_list:");
    if (this.set_in_list == null) {
      sb.append("null");
    } else {
      sb.append(this.set_in_list);
    }
    first = false;
    if (isSetMaps()) {
      if (!first) sb.append(", ");
      sb.append("maps:");
      if (this.maps == null) {
        sb.append("null");
      } else {
        sb.append(this.maps);
      }
      first = false;
    }
    if (isSetStatuses()) {
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kebabMap:");
    if (this.kebabMap == null) {
      sb.append("null");
    } else {
      sb.append(this.kebabMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("another_string:");
    if (this.another_string == null) {
      sb.append("null");
    } else {
      sb.append(this.another_string);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ids == null) {
      throw new TProtocolException("Required field 'ids' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'value' because it's a primitive and you chose the non-beans generator.
    if (numbers == null) {
      throw new TProtocolException("Required field 'numbers' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (set_in_list == null) {
      throw new TProtocolException("Required field 'set_in_list' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'active' because it's a primitive and you chose the non-beans generator.
    if (kebabMap == null) {
      throw new TProtocolException("Required field 'kebabMap' was not present! Struct: " + toString());
    }
    if (another_string == null) {
      throw new TProtocolException("Required field 'another_string' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestObjectStandardSchemeFactory implements SchemeFactory {
    public TestObjectStandardScheme getScheme() {
      return new TestObjectStandardScheme();
    }
  }

  private static class TestObjectStandardScheme extends StandardScheme<TestObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ids = new Ids();
              struct.ids.read(iprot);
              struct.setIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.value = iprot.readDouble();
              struct.setValueIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.numbers = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.numbers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setNumbersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new Status();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SET_IN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.set_in_list = new ArrayList<Set<String>>(_list3.size);
                Set<String> _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  {
                    org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                    _elem4 = new HashSet<String>(2*_set6.size);
                    String _elem7;
                    for (int _i8 = 0; _i8 < _set6.size; ++_i8)
                    {
                      _elem7 = iprot.readString();
                      _elem4.add(_elem7);
                    }
                    iprot.readSetEnd();
                  }
                  struct.set_in_list.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSetInListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                struct.maps = new HashMap<String,Integer>(2*_map9.size);
                String _key10;
                int _val11;
                for (int _i12 = 0; _i12 < _map9.size; ++_i12)
                {
                  _key10 = iprot.readString();
                  _val11 = iprot.readI32();
                  struct.maps.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setMapsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.statuses = new ArrayList<Status>(_list13.size);
                Status _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = new Status();
                  _elem14.read(iprot);
                  struct.statuses.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setStatusesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // KEBAB_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.kebabMap = new HashMap<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>>(2*_map16.size);
                Map<Set<Enums>,Status> _key17;
                Map<Status,Set<Ids>> _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  {
                    org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                    _key17 = new HashMap<Set<Enums>,Status>(2*_map20.size);
                    Set<Enums> _key21;
                    Status _val22;
                    for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                    {
                      {
                        org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                        _key21 = new HashSet<Enums>(2*_set24.size);
                        Enums _elem25;
                        for (int _i26 = 0; _i26 < _set24.size; ++_i26)
                        {
                          _elem25 = Enums.findByValue(iprot.readI32());
                          _key21.add(_elem25);
                        }
                        iprot.readSetEnd();
                      }
                      _val22 = new Status();
                      _val22.read(iprot);
                      _key17.put(_key21, _val22);
                    }
                    iprot.readMapEnd();
                  }
                  {
                    org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                    _val18 = new HashMap<Status,Set<Ids>>(2*_map27.size);
                    Status _key28;
                    Set<Ids> _val29;
                    for (int _i30 = 0; _i30 < _map27.size; ++_i30)
                    {
                      _key28 = new Status();
                      _key28.read(iprot);
                      {
                        org.apache.thrift.protocol.TSet _set31 = iprot.readSetBegin();
                        _val29 = new HashSet<Ids>(2*_set31.size);
                        Ids _elem32;
                        for (int _i33 = 0; _i33 < _set31.size; ++_i33)
                        {
                          _elem32 = new Ids();
                          _elem32.read(iprot);
                          _val29.add(_elem32);
                        }
                        iprot.readSetEnd();
                      }
                      _val18.put(_key28, _val29);
                    }
                    iprot.readMapEnd();
                  }
                  struct.kebabMap.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setKebabMapIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ANOTHER_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.another_string = iprot.readString();
              struct.setAnotherStringIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetValue()) {
        throw new TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetActive()) {
        throw new TProtocolException("Required field 'active' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        struct.ids.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeDouble(struct.value);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
      }
      if (struct.numbers != null) {
        oprot.writeFieldBegin(NUMBERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.numbers.size()));
          for (int _iter34 : struct.numbers)
          {
            oprot.writeI32(_iter34);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.set_in_list != null) {
        oprot.writeFieldBegin(SET_IN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, struct.set_in_list.size()));
          for (Set<String> _iter35 : struct.set_in_list)
          {
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter35.size()));
              for (String _iter36 : _iter35)
              {
                oprot.writeString(_iter36);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.maps != null) {
        if (struct.isSetMaps()) {
          oprot.writeFieldBegin(MAPS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.maps.size()));
            for (Map.Entry<String, Integer> _iter37 : struct.maps.entrySet())
            {
              oprot.writeString(_iter37.getKey());
              oprot.writeI32(_iter37.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.statuses != null) {
        if (struct.isSetStatuses()) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.statuses.size()));
            for (Status _iter38 : struct.statuses)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      if (struct.kebabMap != null) {
        oprot.writeFieldBegin(KEBAB_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.MAP, struct.kebabMap.size()));
          for (Map.Entry<Map<Set<Enums>,Status>, Map<Status,Set<Ids>>> _iter39 : struct.kebabMap.entrySet())
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.STRUCT, _iter39.getKey().size()));
              for (Map.Entry<Set<Enums>, Status> _iter40 : _iter39.getKey().entrySet())
              {
                {
                  oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter40.getKey().size()));
                  for (Enums _iter41 : _iter40.getKey())
                  {
                    oprot.writeI32(_iter41.getValue());
                  }
                  oprot.writeSetEnd();
                }
                _iter40.getValue().write(oprot);
              }
              oprot.writeMapEnd();
            }
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.SET, _iter39.getValue().size()));
              for (Map.Entry<Status, Set<Ids>> _iter42 : _iter39.getValue().entrySet())
              {
                _iter42.getKey().write(oprot);
                {
                  oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, _iter42.getValue().size()));
                  for (Ids _iter43 : _iter42.getValue())
                  {
                    _iter43.write(oprot);
                  }
                  oprot.writeSetEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.another_string != null) {
        oprot.writeFieldBegin(ANOTHER_STRING_FIELD_DESC);
        oprot.writeString(struct.another_string);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestObjectTupleSchemeFactory implements SchemeFactory {
    public TestObjectTupleScheme getScheme() {
      return new TestObjectTupleScheme();
    }
  }

  private static class TestObjectTupleScheme extends TupleScheme<TestObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.ids.write(oprot);
      oprot.writeDouble(struct.value);
      {
        oprot.writeI32(struct.numbers.size());
        for (int _iter44 : struct.numbers)
        {
          oprot.writeI32(_iter44);
        }
      }
      struct.status.write(oprot);
      {
        oprot.writeI32(struct.set_in_list.size());
        for (Set<String> _iter45 : struct.set_in_list)
        {
          {
            oprot.writeI32(_iter45.size());
            for (String _iter46 : _iter45)
            {
              oprot.writeString(_iter46);
            }
          }
        }
      }
      oprot.writeBool(struct.active);
      {
        oprot.writeI32(struct.kebabMap.size());
        for (Map.Entry<Map<Set<Enums>,Status>, Map<Status,Set<Ids>>> _iter47 : struct.kebabMap.entrySet())
        {
          {
            oprot.writeI32(_iter47.getKey().size());
            for (Map.Entry<Set<Enums>, Status> _iter48 : _iter47.getKey().entrySet())
            {
              {
                oprot.writeI32(_iter48.getKey().size());
                for (Enums _iter49 : _iter48.getKey())
                {
                  oprot.writeI32(_iter49.getValue());
                }
              }
              _iter48.getValue().write(oprot);
            }
          }
          {
            oprot.writeI32(_iter47.getValue().size());
            for (Map.Entry<Status, Set<Ids>> _iter50 : _iter47.getValue().entrySet())
            {
              _iter50.getKey().write(oprot);
              {
                oprot.writeI32(_iter50.getValue().size());
                for (Ids _iter51 : _iter50.getValue())
                {
                  _iter51.write(oprot);
                }
              }
            }
          }
        }
      }
      oprot.writeString(struct.another_string);
      BitSet optionals = new BitSet();
      if (struct.isSetDescription()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetMaps()) {
        optionals.set(2);
      }
      if (struct.isSetStatuses()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetMaps()) {
        {
          oprot.writeI32(struct.maps.size());
          for (Map.Entry<String, Integer> _iter52 : struct.maps.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            oprot.writeI32(_iter52.getValue());
          }
        }
      }
      if (struct.isSetStatuses()) {
        {
          oprot.writeI32(struct.statuses.size());
          for (Status _iter53 : struct.statuses)
          {
            _iter53.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ids = new Ids();
      struct.ids.read(iprot);
      struct.setIdsIsSet(true);
      struct.value = iprot.readDouble();
      struct.setValueIsSet(true);
      {
        org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.numbers = new ArrayList<Integer>(_list54.size);
        int _elem55;
        for (int _i56 = 0; _i56 < _list54.size; ++_i56)
        {
          _elem55 = iprot.readI32();
          struct.numbers.add(_elem55);
        }
      }
      struct.setNumbersIsSet(true);
      struct.status = new Status();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      {
        org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, iprot.readI32());
        struct.set_in_list = new ArrayList<Set<String>>(_list57.size);
        Set<String> _elem58;
        for (int _i59 = 0; _i59 < _list57.size; ++_i59)
        {
          {
            org.apache.thrift.protocol.TSet _set60 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _elem58 = new HashSet<String>(2*_set60.size);
            String _elem61;
            for (int _i62 = 0; _i62 < _set60.size; ++_i62)
            {
              _elem61 = iprot.readString();
              _elem58.add(_elem61);
            }
          }
          struct.set_in_list.add(_elem58);
        }
      }
      struct.setSetInListIsSet(true);
      struct.active = iprot.readBool();
      struct.setActiveIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map63 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.kebabMap = new HashMap<Map<Set<Enums>,Status>,Map<Status,Set<Ids>>>(2*_map63.size);
        Map<Set<Enums>,Status> _key64;
        Map<Status,Set<Ids>> _val65;
        for (int _i66 = 0; _i66 < _map63.size; ++_i66)
        {
          {
            org.apache.thrift.protocol.TMap _map67 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _key64 = new HashMap<Set<Enums>,Status>(2*_map67.size);
            Set<Enums> _key68;
            Status _val69;
            for (int _i70 = 0; _i70 < _map67.size; ++_i70)
            {
              {
                org.apache.thrift.protocol.TSet _set71 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _key68 = new HashSet<Enums>(2*_set71.size);
                Enums _elem72;
                for (int _i73 = 0; _i73 < _set71.size; ++_i73)
                {
                  _elem72 = Enums.findByValue(iprot.readI32());
                  _key68.add(_elem72);
                }
              }
              _val69 = new Status();
              _val69.read(iprot);
              _key64.put(_key68, _val69);
            }
          }
          {
            org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.SET, iprot.readI32());
            _val65 = new HashMap<Status,Set<Ids>>(2*_map74.size);
            Status _key75;
            Set<Ids> _val76;
            for (int _i77 = 0; _i77 < _map74.size; ++_i77)
            {
              _key75 = new Status();
              _key75.read(iprot);
              {
                org.apache.thrift.protocol.TSet _set78 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val76 = new HashSet<Ids>(2*_set78.size);
                Ids _elem79;
                for (int _i80 = 0; _i80 < _set78.size; ++_i80)
                {
                  _elem79 = new Ids();
                  _elem79.read(iprot);
                  _val76.add(_elem79);
                }
              }
              _val65.put(_key75, _val76);
            }
          }
          struct.kebabMap.put(_key64, _val65);
        }
      }
      struct.setKebabMapIsSet(true);
      struct.another_string = iprot.readString();
      struct.setAnotherStringIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map81 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.maps = new HashMap<String,Integer>(2*_map81.size);
          String _key82;
          int _val83;
          for (int _i84 = 0; _i84 < _map81.size; ++_i84)
          {
            _key82 = iprot.readString();
            _val83 = iprot.readI32();
            struct.maps.put(_key82, _val83);
          }
        }
        struct.setMapsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.statuses = new ArrayList<Status>(_list85.size);
          Status _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new Status();
            _elem86.read(iprot);
            struct.statuses.add(_elem86);
          }
        }
        struct.setStatusesIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

