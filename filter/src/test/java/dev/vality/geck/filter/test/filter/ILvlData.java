/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dev.vality.geck.filter.test.filter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-06-24")
public class ILvlData implements org.apache.thrift.TBase<ILvlData, ILvlData._Fields>, java.io.Serializable, Cloneable, Comparable<ILvlData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ILvlData");

  private static final org.apache.thrift.protocol.TField LVL2_DATA1_FIELD_DESC = new org.apache.thrift.protocol.TField("lvl2_data1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LVL2_DATA2_FIELD_DESC = new org.apache.thrift.protocol.TField("lvl2_data2", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ILvlDataStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ILvlDataTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ILvl2Data lvl2_data1; // optional
    public @org.apache.thrift.annotation.Nullable ILvl2Data lvl2_data2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LVL2_DATA1((short)1, "lvl2_data1"),
    LVL2_DATA2((short)2, "lvl2_data2");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LVL2_DATA1
          return LVL2_DATA1;
        case 2: // LVL2_DATA2
          return LVL2_DATA2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

      @Override
    public short getThriftFieldId() {
      return _thriftId;
      }

      @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LVL2_DATA1, _Fields.LVL2_DATA2};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LVL2_DATA1, new org.apache.thrift.meta_data.FieldMetaData("lvl2_data1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ILvl2Data.class)));
    tmpMap.put(_Fields.LVL2_DATA2, new org.apache.thrift.meta_data.FieldMetaData("lvl2_data2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ILvl2Data.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ILvlData.class, metaDataMap);
  }

  public ILvlData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ILvlData(ILvlData other) {
    if (other.isSetLvl2Data1()) {
      this.lvl2_data1 = new ILvl2Data(other.lvl2_data1);
    }
    if (other.isSetLvl2Data2()) {
      this.lvl2_data2 = new ILvl2Data(other.lvl2_data2);
    }
  }

    @Override
  public ILvlData deepCopy() {
    return new ILvlData(this);
  }

  @Override
  public void clear() {
    this.lvl2_data1 = null;
    this.lvl2_data2 = null;
  }

    @org.apache.thrift.annotation.Nullable
  public ILvl2Data getLvl2Data1() {
    return this.lvl2_data1;
    }

    public ILvlData setLvl2Data1(@org.apache.thrift.annotation.Nullable ILvl2Data lvl2_data1) {
    this.lvl2_data1 = lvl2_data1;
    return this;
  }

  public void unsetLvl2Data1() {
    this.lvl2_data1 = null;
  }

  /** Returns true if field lvl2_data1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLvl2Data1() {
    return this.lvl2_data1 != null;
  }

  public void setLvl2Data1IsSet(boolean value) {
    if (!value) {
      this.lvl2_data1 = null;
    }
  }

    @org.apache.thrift.annotation.Nullable
  public ILvl2Data getLvl2Data2() {
    return this.lvl2_data2;
    }

    public ILvlData setLvl2Data2(@org.apache.thrift.annotation.Nullable ILvl2Data lvl2_data2) {
    this.lvl2_data2 = lvl2_data2;
    return this;
  }

  public void unsetLvl2Data2() {
    this.lvl2_data2 = null;
  }

  /** Returns true if field lvl2_data2 is set (has been assigned a value) and false otherwise */
  public boolean isSetLvl2Data2() {
    return this.lvl2_data2 != null;
  }

  public void setLvl2Data2IsSet(boolean value) {
    if (!value) {
      this.lvl2_data2 = null;
    }
  }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case LVL2_DATA1:
      if (value == null) {
        unsetLvl2Data1();
      } else {
        setLvl2Data1((ILvl2Data)value);
      }
      break;

    case LVL2_DATA2:
      if (value == null) {
        unsetLvl2Data2();
      } else {
        setLvl2Data2((ILvl2Data)value);
      }
      break;

    }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LVL2_DATA1:
      return getLvl2Data1();

    case LVL2_DATA2:
      return getLvl2Data2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LVL2_DATA1:
      return isSetLvl2Data1();
    case LVL2_DATA2:
      return isSetLvl2Data2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ILvlData)
      return this.equals((ILvlData)that);
    return false;
  }

  public boolean equals(ILvlData that) {
    if (that == null)
      return false;
      if (this == that)
          return true;

    boolean this_present_lvl2_data1 = true && this.isSetLvl2Data1();
    boolean that_present_lvl2_data1 = true && that.isSetLvl2Data1();
    if (this_present_lvl2_data1 || that_present_lvl2_data1) {
      if (!(this_present_lvl2_data1 && that_present_lvl2_data1))
        return false;
      if (!this.lvl2_data1.equals(that.lvl2_data1))
        return false;
    }

    boolean this_present_lvl2_data2 = true && this.isSetLvl2Data2();
    boolean that_present_lvl2_data2 = true && that.isSetLvl2Data2();
    if (this_present_lvl2_data2 || that_present_lvl2_data2) {
      if (!(this_present_lvl2_data2 && that_present_lvl2_data2))
        return false;
      if (!this.lvl2_data2.equals(that.lvl2_data2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLvl2Data1()) ? 131071 : 524287);
    if (isSetLvl2Data1())
      hashCode = hashCode * 8191 + lvl2_data1.hashCode();

    hashCode = hashCode * 8191 + ((isSetLvl2Data2()) ? 131071 : 524287);
    if (isSetLvl2Data2())
      hashCode = hashCode * 8191 + lvl2_data2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ILvlData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

      lastComparison = Boolean.compare(isSetLvl2Data1(), other.isSetLvl2Data1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLvl2Data1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lvl2_data1, other.lvl2_data1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetLvl2Data2(), other.isSetLvl2Data2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLvl2Data2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lvl2_data2, other.lvl2_data2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

    @org.apache.thrift.annotation.Nullable
    @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public _Fields[] getFields() {
    return _Fields.values();
  }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
    return metaDataMap;
    }

    @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
    }

    @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ILvlData(");
    boolean first = true;

    if (isSetLvl2Data1()) {
      sb.append("lvl2_data1:");
      if (this.lvl2_data1 == null) {
        sb.append("null");
      } else {
        sb.append(this.lvl2_data1);
      }
      first = false;
    }
    if (isSetLvl2Data2()) {
      if (!first) sb.append(", ");
      sb.append("lvl2_data2:");
      if (this.lvl2_data2 == null) {
        sb.append("null");
      } else {
        sb.append(this.lvl2_data2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
      if (lvl2_data1 != null) {
          lvl2_data1.validate();
      }
      if (lvl2_data2 != null) {
          lvl2_data2.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

    private static class ILvlDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
    public ILvlDataStandardScheme getScheme() {
      return new ILvlDataStandardScheme();
    }
    }

    private static class ILvlDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ILvlData> {

        @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ILvlData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LVL2_DATA1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lvl2_data1 = new ILvl2Data();
              struct.lvl2_data1.read(iprot);
              struct.setLvl2Data1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LVL2_DATA2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lvl2_data2 = new ILvl2Data();
              struct.lvl2_data2.read(iprot);
              struct.setLvl2Data2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
        }

        @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ILvlData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lvl2_data1 != null) {
        if (struct.isSetLvl2Data1()) {
          oprot.writeFieldBegin(LVL2_DATA1_FIELD_DESC);
          struct.lvl2_data1.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lvl2_data2 != null) {
        if (struct.isSetLvl2Data2()) {
          oprot.writeFieldBegin(LVL2_DATA2_FIELD_DESC);
          struct.lvl2_data2.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    }

    private static class ILvlDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
    public ILvlDataTupleScheme getScheme() {
      return new ILvlDataTupleScheme();
    }
    }

    private static class ILvlDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ILvlData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ILvlData struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLvl2Data1()) {
        optionals.set(0);
      }
      if (struct.isSetLvl2Data2()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLvl2Data1()) {
        struct.lvl2_data1.write(oprot);
      }
      if (struct.isSetLvl2Data2()) {
        struct.lvl2_data2.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ILvlData struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.lvl2_data1 = new ILvl2Data();
        struct.lvl2_data1.read(iprot);
        struct.setLvl2Data1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.lvl2_data2 = new ILvl2Data();
        struct.lvl2_data2.read(iprot);
        struct.setLvl2Data2IsSet(true);
      }
    }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

