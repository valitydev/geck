package dev.vality.geck.filter.test.filter;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2020-07-09")
public class ILvl2Data implements org.apache.thrift.TBase<ILvl2Data, ILvl2Data._Fields>, java.io.Serializable, Cloneable, Comparable<ILvl2Data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ILvl2Data");

  private static final org.apache.thrift.protocol.TField IL2_VAL1_FIELD_DESC = new org.apache.thrift.protocol.TField("il2_val1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IL2_VAL2_FIELD_DESC = new org.apache.thrift.protocol.TField("il2_val2", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ILvl2DataStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ILvl2DataTupleSchemeFactory();

  public String il2_val1; // required
  public String il2_val2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IL2_VAL1((short)1, "il2_val1"),
    IL2_VAL2((short)2, "il2_val2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IL2_VAL1
          return IL2_VAL1;
        case 2: // IL2_VAL2
          return IL2_VAL2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IL2_VAL1, new org.apache.thrift.meta_data.FieldMetaData("il2_val1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IL2_VAL2, new org.apache.thrift.meta_data.FieldMetaData("il2_val2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ILvl2Data.class, metaDataMap);
  }

  public ILvl2Data() {
  }

  public ILvl2Data(
    String il2_val1,
    String il2_val2)
  {
    this();
    this.il2_val1 = il2_val1;
    this.il2_val2 = il2_val2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ILvl2Data(ILvl2Data other) {
    if (other.isSetIl2Val1()) {
      this.il2_val1 = other.il2_val1;
    }
    if (other.isSetIl2Val2()) {
      this.il2_val2 = other.il2_val2;
    }
  }

  public ILvl2Data deepCopy() {
    return new ILvl2Data(this);
  }

  @Override
  public void clear() {
    this.il2_val1 = null;
    this.il2_val2 = null;
  }

  public String getIl2Val1() {
    return this.il2_val1;
  }

  public ILvl2Data setIl2Val1(String il2_val1) {
    this.il2_val1 = il2_val1;
    return this;
  }

  public void unsetIl2Val1() {
    this.il2_val1 = null;
  }

  /** Returns true if field il2_val1 is set (has been assigned a value) and false otherwise */
  public boolean isSetIl2Val1() {
    return this.il2_val1 != null;
  }

  public void setIl2Val1IsSet(boolean value) {
    if (!value) {
      this.il2_val1 = null;
    }
  }

  public String getIl2Val2() {
    return this.il2_val2;
  }

  public ILvl2Data setIl2Val2(String il2_val2) {
    this.il2_val2 = il2_val2;
    return this;
  }

  public void unsetIl2Val2() {
    this.il2_val2 = null;
  }

  /** Returns true if field il2_val2 is set (has been assigned a value) and false otherwise */
  public boolean isSetIl2Val2() {
    return this.il2_val2 != null;
  }

  public void setIl2Val2IsSet(boolean value) {
    if (!value) {
      this.il2_val2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IL2_VAL1:
      if (value == null) {
        unsetIl2Val1();
      } else {
        setIl2Val1((String)value);
      }
      break;

    case IL2_VAL2:
      if (value == null) {
        unsetIl2Val2();
      } else {
        setIl2Val2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IL2_VAL1:
      return getIl2Val1();

    case IL2_VAL2:
      return getIl2Val2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IL2_VAL1:
      return isSetIl2Val1();
    case IL2_VAL2:
      return isSetIl2Val2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ILvl2Data)
      return this.equals((ILvl2Data)that);
    return false;
  }

  public boolean equals(ILvl2Data that) {
    if (that == null)
      return false;

    boolean this_present_il2_val1 = true && this.isSetIl2Val1();
    boolean that_present_il2_val1 = true && that.isSetIl2Val1();
    if (this_present_il2_val1 || that_present_il2_val1) {
      if (!(this_present_il2_val1 && that_present_il2_val1))
        return false;
      if (!this.il2_val1.equals(that.il2_val1))
        return false;
    }

    boolean this_present_il2_val2 = true && this.isSetIl2Val2();
    boolean that_present_il2_val2 = true && that.isSetIl2Val2();
    if (this_present_il2_val2 || that_present_il2_val2) {
      if (!(this_present_il2_val2 && that_present_il2_val2))
        return false;
      if (!this.il2_val2.equals(that.il2_val2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIl2Val1()) ? 131071 : 524287);
    if (isSetIl2Val1())
      hashCode = hashCode * 8191 + il2_val1.hashCode();

    hashCode = hashCode * 8191 + ((isSetIl2Val2()) ? 131071 : 524287);
    if (isSetIl2Val2())
      hashCode = hashCode * 8191 + il2_val2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ILvl2Data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIl2Val1()).compareTo(other.isSetIl2Val1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIl2Val1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.il2_val1, other.il2_val1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIl2Val2()).compareTo(other.isSetIl2Val2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIl2Val2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.il2_val2, other.il2_val2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public _Fields[] getFields() {
    return _Fields.values();
  }

  public Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
    return metaDataMap;
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ILvl2Data(");
    boolean first = true;

    sb.append("il2_val1:");
    if (this.il2_val1 == null) {
      sb.append("null");
    } else {
      sb.append(this.il2_val1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("il2_val2:");
    if (this.il2_val2 == null) {
      sb.append("null");
    } else {
      sb.append(this.il2_val2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (il2_val1 == null) {
      throw new TProtocolException("Required field 'il2_val1' was not present! Struct: " + toString());
    }
    if (il2_val2 == null) {
      throw new TProtocolException("Required field 'il2_val2' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ILvl2DataStandardSchemeFactory implements SchemeFactory {
    public ILvl2DataStandardScheme getScheme() {
      return new ILvl2DataStandardScheme();
    }
  }

  private static class ILvl2DataStandardScheme extends StandardScheme<ILvl2Data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ILvl2Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IL2_VAL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.il2_val1 = iprot.readString();
              struct.setIl2Val1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IL2_VAL2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.il2_val2 = iprot.readString();
              struct.setIl2Val2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ILvl2Data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.il2_val1 != null) {
        oprot.writeFieldBegin(IL2_VAL1_FIELD_DESC);
        oprot.writeString(struct.il2_val1);
        oprot.writeFieldEnd();
      }
      if (struct.il2_val2 != null) {
        oprot.writeFieldBegin(IL2_VAL2_FIELD_DESC);
        oprot.writeString(struct.il2_val2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ILvl2DataTupleSchemeFactory implements SchemeFactory {
    public ILvl2DataTupleScheme getScheme() {
      return new ILvl2DataTupleScheme();
    }
  }

  private static class ILvl2DataTupleScheme extends TupleScheme<ILvl2Data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ILvl2Data struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.il2_val1);
      oprot.writeString(struct.il2_val2);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ILvl2Data struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.il2_val1 = iprot.readString();
      struct.setIl2Val1IsSet(true);
      struct.il2_val2 = iprot.readString();
      struct.setIl2Val2IsSet(true);
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

