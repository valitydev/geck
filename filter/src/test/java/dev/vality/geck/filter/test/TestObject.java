package dev.vality.geck.filter.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2020-07-09")
public class TestObject implements org.apache.thrift.TBase<TestObject, TestObject._Fields>, java.io.Serializable, Cloneable, Comparable<TestObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestObject");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OTHER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("other_ids", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numbers", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField LIST_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("list_ids", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new TestObjectStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new TestObjectTupleSchemeFactory();

  public long id; // required
  public Ids other_ids; // required
  public Status status; // required
  public Type type; // required
  public String words; // optional
  public List<Long> numbers; // optional
  public List<Ids> list_ids; // optional
  public List<List<Status>> statuses; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OTHER_IDS((short)2, "other_ids"),
    STATUS((short)3, "status"),
    TYPE((short)4, "type"),
    WORDS((short)5, "words"),
    NUMBERS((short)6, "numbers"),
    LIST_IDS((short)7, "list_ids"),
    STATUSES((short)8, "statuses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OTHER_IDS
          return OTHER_IDS;
        case 3: // STATUS
          return STATUS;
        case 4: // TYPE
          return TYPE;
        case 5: // WORDS
          return WORDS;
        case 6: // NUMBERS
          return NUMBERS;
        case 7: // LIST_IDS
          return LIST_IDS;
        case 8: // STATUSES
          return STATUSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WORDS, _Fields.NUMBERS, _Fields.LIST_IDS, _Fields.STATUSES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OTHER_IDS, new org.apache.thrift.meta_data.FieldMetaData("other_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Ids.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Type.class)));
    tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("numbers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LIST_IDS, new org.apache.thrift.meta_data.FieldMetaData("list_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Ids.class))));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestObject.class, metaDataMap);
  }

  public TestObject() {
  }

  public TestObject(
    long id,
    Ids other_ids,
    Status status,
    Type type)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.other_ids = other_ids;
    this.status = status;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestObject(TestObject other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetOtherIds()) {
      this.other_ids = new Ids(other.other_ids);
    }
    if (other.isSetStatus()) {
      this.status = new Status(other.status);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetWords()) {
      this.words = other.words;
    }
    if (other.isSetNumbers()) {
      List<Long> __this__numbers = new ArrayList<Long>(other.numbers);
      this.numbers = __this__numbers;
    }
    if (other.isSetListIds()) {
      List<Ids> __this__list_ids = new ArrayList<Ids>(other.list_ids.size());
      for (Ids other_element : other.list_ids) {
        __this__list_ids.add(other_element);
      }
      this.list_ids = __this__list_ids;
    }
    if (other.isSetStatuses()) {
      List<List<Status>> __this__statuses = new ArrayList<List<Status>>(other.statuses.size());
      for (List<Status> other_element : other.statuses) {
        List<Status> __this__statuses_copy = new ArrayList<Status>(other_element.size());
        for (Status other_element_element : other_element) {
          __this__statuses_copy.add(other_element_element);
        }
        __this__statuses.add(__this__statuses_copy);
      }
      this.statuses = __this__statuses;
    }
  }

  public TestObject deepCopy() {
    return new TestObject(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.other_ids = null;
    this.status = null;
    this.type = null;
    this.words = null;
    this.numbers = null;
    this.list_ids = null;
    this.statuses = null;
  }

  public long getId() {
    return this.id;
  }

  public TestObject setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public Ids getOtherIds() {
    return this.other_ids;
  }

  public TestObject setOtherIds(Ids other_ids) {
    this.other_ids = other_ids;
    return this;
  }

  public void unsetOtherIds() {
    this.other_ids = null;
  }

  /** Returns true if field other_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherIds() {
    return this.other_ids != null;
  }

  public void setOtherIdsIsSet(boolean value) {
    if (!value) {
      this.other_ids = null;
    }
  }

  public Status getStatus() {
    return this.status;
  }

  public TestObject setStatus(Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public Type getType() {
    return this.type;
  }

  public TestObject setType(Type type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getWords() {
    return this.words;
  }

  public TestObject setWords(String words) {
    this.words = words;
    return this;
  }

  public void unsetWords() {
    this.words = null;
  }

  /** Returns true if field words is set (has been assigned a value) and false otherwise */
  public boolean isSetWords() {
    return this.words != null;
  }

  public void setWordsIsSet(boolean value) {
    if (!value) {
      this.words = null;
    }
  }

  public int getNumbersSize() {
    return (this.numbers == null) ? 0 : this.numbers.size();
  }

  public java.util.Iterator<Long> getNumbersIterator() {
    return (this.numbers == null) ? null : this.numbers.iterator();
  }

  public void addToNumbers(long elem) {
    if (this.numbers == null) {
      this.numbers = new ArrayList<Long>();
    }
    this.numbers.add(elem);
  }

  public List<Long> getNumbers() {
    return this.numbers;
  }

  public TestObject setNumbers(List<Long> numbers) {
    this.numbers = numbers;
    return this;
  }

  public void unsetNumbers() {
    this.numbers = null;
  }

  /** Returns true if field numbers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumbers() {
    return this.numbers != null;
  }

  public void setNumbersIsSet(boolean value) {
    if (!value) {
      this.numbers = null;
    }
  }

  public int getListIdsSize() {
    return (this.list_ids == null) ? 0 : this.list_ids.size();
  }

  public java.util.Iterator<Ids> getListIdsIterator() {
    return (this.list_ids == null) ? null : this.list_ids.iterator();
  }

  public void addToListIds(Ids elem) {
    if (this.list_ids == null) {
      this.list_ids = new ArrayList<Ids>();
    }
    this.list_ids.add(elem);
  }

  public List<Ids> getListIds() {
    return this.list_ids;
  }

  public TestObject setListIds(List<Ids> list_ids) {
    this.list_ids = list_ids;
    return this;
  }

  public void unsetListIds() {
    this.list_ids = null;
  }

  /** Returns true if field list_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetListIds() {
    return this.list_ids != null;
  }

  public void setListIdsIsSet(boolean value) {
    if (!value) {
      this.list_ids = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public java.util.Iterator<List<Status>> getStatusesIterator() {
    return (this.statuses == null) ? null : this.statuses.iterator();
  }

  public void addToStatuses(List<Status> elem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<List<Status>>();
    }
    this.statuses.add(elem);
  }

  public List<List<Status>> getStatuses() {
    return this.statuses;
  }

  public TestObject setStatuses(List<List<Status>> statuses) {
    this.statuses = statuses;
    return this;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case OTHER_IDS:
      if (value == null) {
        unsetOtherIds();
      } else {
        setOtherIds((Ids)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Type)value);
      }
      break;

    case WORDS:
      if (value == null) {
        unsetWords();
      } else {
        setWords((String)value);
      }
      break;

    case NUMBERS:
      if (value == null) {
        unsetNumbers();
      } else {
        setNumbers((List<Long>)value);
      }
      break;

    case LIST_IDS:
      if (value == null) {
        unsetListIds();
      } else {
        setListIds((List<Ids>)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((List<List<Status>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case OTHER_IDS:
      return getOtherIds();

    case STATUS:
      return getStatus();

    case TYPE:
      return getType();

    case WORDS:
      return getWords();

    case NUMBERS:
      return getNumbers();

    case LIST_IDS:
      return getListIds();

    case STATUSES:
      return getStatuses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OTHER_IDS:
      return isSetOtherIds();
    case STATUS:
      return isSetStatus();
    case TYPE:
      return isSetType();
    case WORDS:
      return isSetWords();
    case NUMBERS:
      return isSetNumbers();
    case LIST_IDS:
      return isSetListIds();
    case STATUSES:
      return isSetStatuses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestObject)
      return this.equals((TestObject)that);
    return false;
  }

  public boolean equals(TestObject that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_other_ids = true && this.isSetOtherIds();
    boolean that_present_other_ids = true && that.isSetOtherIds();
    if (this_present_other_ids || that_present_other_ids) {
      if (!(this_present_other_ids && that_present_other_ids))
        return false;
      if (!this.other_ids.equals(that.other_ids))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_words = true && this.isSetWords();
    boolean that_present_words = true && that.isSetWords();
    if (this_present_words || that_present_words) {
      if (!(this_present_words && that_present_words))
        return false;
      if (!this.words.equals(that.words))
        return false;
    }

    boolean this_present_numbers = true && this.isSetNumbers();
    boolean that_present_numbers = true && that.isSetNumbers();
    if (this_present_numbers || that_present_numbers) {
      if (!(this_present_numbers && that_present_numbers))
        return false;
      if (!this.numbers.equals(that.numbers))
        return false;
    }

    boolean this_present_list_ids = true && this.isSetListIds();
    boolean that_present_list_ids = true && that.isSetListIds();
    if (this_present_list_ids || that_present_list_ids) {
      if (!(this_present_list_ids && that_present_list_ids))
        return false;
      if (!this.list_ids.equals(that.list_ids))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetOtherIds()) ? 131071 : 524287);
    if (isSetOtherIds())
      hashCode = hashCode * 8191 + other_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetWords()) ? 131071 : 524287);
    if (isSetWords())
      hashCode = hashCode * 8191 + words.hashCode();

    hashCode = hashCode * 8191 + ((isSetNumbers()) ? 131071 : 524287);
    if (isSetNumbers())
      hashCode = hashCode * 8191 + numbers.hashCode();

    hashCode = hashCode * 8191 + ((isSetListIds()) ? 131071 : 524287);
    if (isSetListIds())
      hashCode = hashCode * 8191 + list_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatuses()) ? 131071 : 524287);
    if (isSetStatuses())
      hashCode = hashCode * 8191 + statuses.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherIds()).compareTo(other.isSetOtherIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_ids, other.other_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumbers()).compareTo(other.isSetNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numbers, other.numbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListIds()).compareTo(other.isSetListIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_ids, other.list_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public _Fields[] getFields() {
    return _Fields.values();
  }

  public Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
    return metaDataMap;
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestObject(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("other_ids:");
    if (this.other_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.other_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetWords()) {
      if (!first) sb.append(", ");
      sb.append("words:");
      if (this.words == null) {
        sb.append("null");
      } else {
        sb.append(this.words);
      }
      first = false;
    }
    if (isSetNumbers()) {
      if (!first) sb.append(", ");
      sb.append("numbers:");
      if (this.numbers == null) {
        sb.append("null");
      } else {
        sb.append(this.numbers);
      }
      first = false;
    }
    if (isSetListIds()) {
      if (!first) sb.append(", ");
      sb.append("list_ids:");
      if (this.list_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.list_ids);
      }
      first = false;
    }
    if (isSetStatuses()) {
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (other_ids == null) {
      throw new TProtocolException("Required field 'other_ids' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestObjectStandardSchemeFactory implements SchemeFactory {
    public TestObjectStandardScheme getScheme() {
      return new TestObjectStandardScheme();
    }
  }

  private static class TestObjectStandardScheme extends StandardScheme<TestObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OTHER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.other_ids = new Ids();
              struct.other_ids.read(iprot);
              struct.setOtherIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new Status();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = Type.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.words = iprot.readString();
              struct.setWordsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.numbers = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.numbers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setNumbersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIST_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.list_ids = new ArrayList<Ids>(_list3.size);
                Ids _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Ids();
                  _elem4.read(iprot);
                  struct.list_ids.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setListIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.statuses = new ArrayList<List<Status>>(_list6.size);
                List<Status> _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  {
                    org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                    _elem7 = new ArrayList<Status>(_list9.size);
                    Status _elem10;
                    for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                    {
                      _elem10 = new Status();
                      _elem10.read(iprot);
                      _elem7.add(_elem10);
                    }
                    iprot.readListEnd();
                  }
                  struct.statuses.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setStatusesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.other_ids != null) {
        oprot.writeFieldBegin(OTHER_IDS_FIELD_DESC);
        struct.other_ids.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.words != null) {
        if (struct.isSetWords()) {
          oprot.writeFieldBegin(WORDS_FIELD_DESC);
          oprot.writeString(struct.words);
          oprot.writeFieldEnd();
        }
      }
      if (struct.numbers != null) {
        if (struct.isSetNumbers()) {
          oprot.writeFieldBegin(NUMBERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.numbers.size()));
            for (long _iter12 : struct.numbers)
            {
              oprot.writeI64(_iter12);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_ids != null) {
        if (struct.isSetListIds()) {
          oprot.writeFieldBegin(LIST_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.list_ids.size()));
            for (Ids _iter13 : struct.list_ids)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.statuses != null) {
        if (struct.isSetStatuses()) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.statuses.size()));
            for (List<Status> _iter14 : struct.statuses)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter14.size()));
                for (Status _iter15 : _iter14)
                {
                  _iter15.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestObjectTupleSchemeFactory implements SchemeFactory {
    public TestObjectTupleScheme getScheme() {
      return new TestObjectTupleScheme();
    }
  }

  private static class TestObjectTupleScheme extends TupleScheme<TestObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      struct.other_ids.write(oprot);
      struct.status.write(oprot);
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetWords()) {
        optionals.set(0);
      }
      if (struct.isSetNumbers()) {
        optionals.set(1);
      }
      if (struct.isSetListIds()) {
        optionals.set(2);
      }
      if (struct.isSetStatuses()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetWords()) {
        oprot.writeString(struct.words);
      }
      if (struct.isSetNumbers()) {
        {
          oprot.writeI32(struct.numbers.size());
          for (long _iter16 : struct.numbers)
          {
            oprot.writeI64(_iter16);
          }
        }
      }
      if (struct.isSetListIds()) {
        {
          oprot.writeI32(struct.list_ids.size());
          for (Ids _iter17 : struct.list_ids)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetStatuses()) {
        {
          oprot.writeI32(struct.statuses.size());
          for (List<Status> _iter18 : struct.statuses)
          {
            {
              oprot.writeI32(_iter18.size());
              for (Status _iter19 : _iter18)
              {
                _iter19.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.other_ids = new Ids();
      struct.other_ids.read(iprot);
      struct.setOtherIdsIsSet(true);
      struct.status = new Status();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      struct.type = Type.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.words = iprot.readString();
        struct.setWordsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.numbers = new ArrayList<Long>(_list20.size);
          long _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readI64();
            struct.numbers.add(_elem21);
          }
        }
        struct.setNumbersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.list_ids = new ArrayList<Ids>(_list23.size);
          Ids _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new Ids();
            _elem24.read(iprot);
            struct.list_ids.add(_elem24);
          }
        }
        struct.setListIdsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.statuses = new ArrayList<List<Status>>(_list26.size);
          List<Status> _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            {
              org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem27 = new ArrayList<Status>(_list29.size);
              Status _elem30;
              for (int _i31 = 0; _i31 < _list29.size; ++_i31)
              {
                _elem30 = new Status();
                _elem30.read(iprot);
                _elem27.add(_elem30);
              }
            }
            struct.statuses.add(_elem27);
          }
        }
        struct.setStatusesIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

