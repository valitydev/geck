/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dev.vality.geck.filter.test.filter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-06-24")
public class Invoice implements org.apache.thrift.TBase<Invoice, Invoice._Fields>, java.io.Serializable, Cloneable, Comparable<Invoice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Invoice");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_COLL_FIELD_DESC = new org.apache.thrift.protocol.TField("data_coll", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField LVL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("lvl_data", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField I_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("i_details", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField I_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i_map", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField OBJ_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_map", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField I_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i_list", org.apache.thrift.protocol.TType.LIST, (short) 10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InvoiceStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InvoiceTupleSchemeFactory();

  public int id; // required
    public @org.apache.thrift.annotation.Nullable InvoiceStatus status; // required
    public @org.apache.thrift.annotation.Nullable IDataCollection data_coll; // optional
    public @org.apache.thrift.annotation.Nullable IData data; // required
    public @org.apache.thrift.annotation.Nullable ILvlData lvl_data; // required
    public @org.apache.thrift.annotation.Nullable String i_details; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<Integer, IData> i_map; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<InvoiceStatus, IData> obj_map; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<Integer> i_list; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    STATUS((short)2, "status"),
    DATA_COLL((short)3, "data_coll"),
    DATA((short)5, "data"),
    LVL_DATA((short)6, "lvl_data"),
    I_DETAILS((short)7, "i_details"),
    I_MAP((short)8, "i_map"),
    OBJ_MAP((short)9, "obj_map"),
    I_LIST((short)10, "i_list");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STATUS
          return STATUS;
        case 3: // DATA_COLL
          return DATA_COLL;
        case 5: // DATA
          return DATA;
        case 6: // LVL_DATA
          return LVL_DATA;
        case 7: // I_DETAILS
          return I_DETAILS;
        case 8: // I_MAP
          return I_MAP;
        case 9: // OBJ_MAP
          return OBJ_MAP;
        case 10: // I_LIST
          return I_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

      @Override
    public short getThriftFieldId() {
      return _thriftId;
      }

      @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.DATA_COLL, _Fields.I_DETAILS, _Fields.I_MAP, _Fields.OBJ_MAP, _Fields.I_LIST};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvoiceStatus.class)));
    tmpMap.put(_Fields.DATA_COLL, new org.apache.thrift.meta_data.FieldMetaData("data_coll", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IDataCollection.class)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IData.class)));
    tmpMap.put(_Fields.LVL_DATA, new org.apache.thrift.meta_data.FieldMetaData("lvl_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ILvlData.class)));
    tmpMap.put(_Fields.I_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("i_details", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_MAP, new org.apache.thrift.meta_data.FieldMetaData("i_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IData.class))));
    tmpMap.put(_Fields.OBJ_MAP, new org.apache.thrift.meta_data.FieldMetaData("obj_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvoiceStatus.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IData.class))));
    tmpMap.put(_Fields.I_LIST, new org.apache.thrift.meta_data.FieldMetaData("i_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Invoice.class, metaDataMap);
  }

  public Invoice() {
  }

  public Invoice(
    int id,
    InvoiceStatus status,
    IData data,
    ILvlData lvl_data)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.status = status;
    this.data = data;
    this.lvl_data = lvl_data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Invoice(Invoice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetStatus()) {
      this.status = new InvoiceStatus(other.status);
    }
    if (other.isSetDataColl()) {
      this.data_coll = new IDataCollection(other.data_coll);
    }
    if (other.isSetData()) {
      this.data = new IData(other.data);
    }
    if (other.isSetLvlData()) {
      this.lvl_data = new ILvlData(other.lvl_data);
    }
    if (other.isSetIDetails()) {
      this.i_details = other.i_details;
    }
    if (other.isSetIMap()) {
        java.util.Map<Integer, IData> __this__i_map = new java.util.HashMap<Integer, IData>(other.i_map.size());
        for (java.util.Map.Entry<Integer, IData> other_element : other.i_map.entrySet()) {

        Integer other_element_key = other_element.getKey();
        IData other_element_value = other_element.getValue();

        Integer __this__i_map_copy_key = other_element_key;

        IData __this__i_map_copy_value = new IData(other_element_value);

        __this__i_map.put(__this__i_map_copy_key, __this__i_map_copy_value);
      }
      this.i_map = __this__i_map;
    }
    if (other.isSetObjMap()) {
        java.util.Map<InvoiceStatus, IData> __this__obj_map = new java.util.HashMap<InvoiceStatus, IData>(other.obj_map.size());
        for (java.util.Map.Entry<InvoiceStatus, IData> other_element : other.obj_map.entrySet()) {

        InvoiceStatus other_element_key = other_element.getKey();
        IData other_element_value = other_element.getValue();

        InvoiceStatus __this__obj_map_copy_key = new InvoiceStatus(other_element_key);

        IData __this__obj_map_copy_value = new IData(other_element_value);

        __this__obj_map.put(__this__obj_map_copy_key, __this__obj_map_copy_value);
      }
      this.obj_map = __this__obj_map;
    }
    if (other.isSetIList()) {
        java.util.List<Integer> __this__i_list = new java.util.ArrayList<Integer>(other.i_list);
      this.i_list = __this__i_list;
    }
  }

    @Override
  public Invoice deepCopy() {
    return new Invoice(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.status = null;
    this.data_coll = null;
    this.data = null;
    this.lvl_data = null;
    this.i_details = null;
    this.i_map = null;
    this.obj_map = null;
    this.i_list = null;
  }

  public int getId() {
    return this.id;
  }

  public Invoice setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

    @org.apache.thrift.annotation.Nullable
  public InvoiceStatus getStatus() {
    return this.status;
    }

    public Invoice setStatus(@org.apache.thrift.annotation.Nullable InvoiceStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

    @org.apache.thrift.annotation.Nullable
  public IDataCollection getDataColl() {
    return this.data_coll;
    }

    public Invoice setDataColl(@org.apache.thrift.annotation.Nullable IDataCollection data_coll) {
    this.data_coll = data_coll;
    return this;
  }

  public void unsetDataColl() {
    this.data_coll = null;
  }

  /** Returns true if field data_coll is set (has been assigned a value) and false otherwise */
  public boolean isSetDataColl() {
    return this.data_coll != null;
  }

  public void setDataCollIsSet(boolean value) {
    if (!value) {
      this.data_coll = null;
    }
  }

    @org.apache.thrift.annotation.Nullable
  public IData getData() {
    return this.data;
    }

    public Invoice setData(@org.apache.thrift.annotation.Nullable IData data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

    @org.apache.thrift.annotation.Nullable
  public ILvlData getLvlData() {
    return this.lvl_data;
    }

    public Invoice setLvlData(@org.apache.thrift.annotation.Nullable ILvlData lvl_data) {
    this.lvl_data = lvl_data;
    return this;
  }

  public void unsetLvlData() {
    this.lvl_data = null;
  }

  /** Returns true if field lvl_data is set (has been assigned a value) and false otherwise */
  public boolean isSetLvlData() {
    return this.lvl_data != null;
  }

  public void setLvlDataIsSet(boolean value) {
    if (!value) {
      this.lvl_data = null;
    }
  }

    @org.apache.thrift.annotation.Nullable
  public String getIDetails() {
    return this.i_details;
    }

    public Invoice setIDetails(@org.apache.thrift.annotation.Nullable String i_details) {
    this.i_details = i_details;
    return this;
  }

  public void unsetIDetails() {
    this.i_details = null;
  }

  /** Returns true if field i_details is set (has been assigned a value) and false otherwise */
  public boolean isSetIDetails() {
    return this.i_details != null;
  }

  public void setIDetailsIsSet(boolean value) {
    if (!value) {
      this.i_details = null;
    }
  }

  public int getIMapSize() {
    return (this.i_map == null) ? 0 : this.i_map.size();
  }

  public void putToIMap(int key, IData val) {
    if (this.i_map == null) {
        this.i_map = new java.util.HashMap<Integer, IData>();
    }
    this.i_map.put(key, val);
  }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<Integer, IData> getIMap() {
    return this.i_map;
    }

    public Invoice setIMap(@org.apache.thrift.annotation.Nullable java.util.Map<Integer, IData> i_map) {
    this.i_map = i_map;
    return this;
  }

  public void unsetIMap() {
    this.i_map = null;
  }

  /** Returns true if field i_map is set (has been assigned a value) and false otherwise */
  public boolean isSetIMap() {
    return this.i_map != null;
  }

  public void setIMapIsSet(boolean value) {
    if (!value) {
      this.i_map = null;
    }
  }

  public int getObjMapSize() {
    return (this.obj_map == null) ? 0 : this.obj_map.size();
  }

  public void putToObjMap(InvoiceStatus key, IData val) {
    if (this.obj_map == null) {
        this.obj_map = new java.util.HashMap<InvoiceStatus, IData>();
    }
    this.obj_map.put(key, val);
  }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<InvoiceStatus, IData> getObjMap() {
    return this.obj_map;
    }

    public Invoice setObjMap(@org.apache.thrift.annotation.Nullable java.util.Map<InvoiceStatus, IData> obj_map) {
    this.obj_map = obj_map;
    return this;
  }

  public void unsetObjMap() {
    this.obj_map = null;
  }

  /** Returns true if field obj_map is set (has been assigned a value) and false otherwise */
  public boolean isSetObjMap() {
    return this.obj_map != null;
  }

  public void setObjMapIsSet(boolean value) {
    if (!value) {
      this.obj_map = null;
    }
  }

  public int getIListSize() {
    return (this.i_list == null) ? 0 : this.i_list.size();
  }

    @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Integer> getIListIterator() {
    return (this.i_list == null) ? null : this.i_list.iterator();
  }

  public void addToIList(int elem) {
    if (this.i_list == null) {
        this.i_list = new java.util.ArrayList<Integer>();
    }
    this.i_list.add(elem);
  }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Integer> getIList() {
    return this.i_list;
    }

    public Invoice setIList(@org.apache.thrift.annotation.Nullable java.util.List<Integer> i_list) {
    this.i_list = i_list;
    return this;
  }

  public void unsetIList() {
    this.i_list = null;
  }

  /** Returns true if field i_list is set (has been assigned a value) and false otherwise */
  public boolean isSetIList() {
    return this.i_list != null;
  }

  public void setIListIsSet(boolean value) {
    if (!value) {
      this.i_list = null;
    }
  }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((InvoiceStatus)value);
      }
      break;

    case DATA_COLL:
      if (value == null) {
        unsetDataColl();
      } else {
        setDataColl((IDataCollection)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((IData)value);
      }
      break;

    case LVL_DATA:
      if (value == null) {
        unsetLvlData();
      } else {
        setLvlData((ILvlData)value);
      }
      break;

    case I_DETAILS:
      if (value == null) {
        unsetIDetails();
      } else {
        setIDetails((String)value);
      }
      break;

    case I_MAP:
      if (value == null) {
        unsetIMap();
      } else {
          setIMap((java.util.Map<Integer, IData>) value);
      }
      break;

    case OBJ_MAP:
      if (value == null) {
        unsetObjMap();
      } else {
          setObjMap((java.util.Map<InvoiceStatus, IData>) value);
      }
      break;

    case I_LIST:
      if (value == null) {
        unsetIList();
      } else {
          setIList((java.util.List<Integer>) value);
      }
      break;

    }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case STATUS:
      return getStatus();

    case DATA_COLL:
      return getDataColl();

    case DATA:
      return getData();

    case LVL_DATA:
      return getLvlData();

    case I_DETAILS:
      return getIDetails();

    case I_MAP:
      return getIMap();

    case OBJ_MAP:
      return getObjMap();

    case I_LIST:
      return getIList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STATUS:
      return isSetStatus();
    case DATA_COLL:
      return isSetDataColl();
    case DATA:
      return isSetData();
    case LVL_DATA:
      return isSetLvlData();
    case I_DETAILS:
      return isSetIDetails();
    case I_MAP:
      return isSetIMap();
    case OBJ_MAP:
      return isSetObjMap();
    case I_LIST:
      return isSetIList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Invoice)
      return this.equals((Invoice)that);
    return false;
  }

  public boolean equals(Invoice that) {
    if (that == null)
      return false;
      if (this == that)
          return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_data_coll = true && this.isSetDataColl();
    boolean that_present_data_coll = true && that.isSetDataColl();
    if (this_present_data_coll || that_present_data_coll) {
      if (!(this_present_data_coll && that_present_data_coll))
        return false;
      if (!this.data_coll.equals(that.data_coll))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_lvl_data = true && this.isSetLvlData();
    boolean that_present_lvl_data = true && that.isSetLvlData();
    if (this_present_lvl_data || that_present_lvl_data) {
      if (!(this_present_lvl_data && that_present_lvl_data))
        return false;
      if (!this.lvl_data.equals(that.lvl_data))
        return false;
    }

    boolean this_present_i_details = true && this.isSetIDetails();
    boolean that_present_i_details = true && that.isSetIDetails();
    if (this_present_i_details || that_present_i_details) {
      if (!(this_present_i_details && that_present_i_details))
        return false;
      if (!this.i_details.equals(that.i_details))
        return false;
    }

    boolean this_present_i_map = true && this.isSetIMap();
    boolean that_present_i_map = true && that.isSetIMap();
    if (this_present_i_map || that_present_i_map) {
      if (!(this_present_i_map && that_present_i_map))
        return false;
      if (!this.i_map.equals(that.i_map))
        return false;
    }

    boolean this_present_obj_map = true && this.isSetObjMap();
    boolean that_present_obj_map = true && that.isSetObjMap();
    if (this_present_obj_map || that_present_obj_map) {
      if (!(this_present_obj_map && that_present_obj_map))
        return false;
      if (!this.obj_map.equals(that.obj_map))
        return false;
    }

    boolean this_present_i_list = true && this.isSetIList();
    boolean that_present_i_list = true && that.isSetIList();
    if (this_present_i_list || that_present_i_list) {
      if (!(this_present_i_list && that_present_i_list))
        return false;
      if (!this.i_list.equals(that.i_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataColl()) ? 131071 : 524287);
    if (isSetDataColl())
      hashCode = hashCode * 8191 + data_coll.hashCode();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isSetLvlData()) ? 131071 : 524287);
    if (isSetLvlData())
      hashCode = hashCode * 8191 + lvl_data.hashCode();

    hashCode = hashCode * 8191 + ((isSetIDetails()) ? 131071 : 524287);
    if (isSetIDetails())
      hashCode = hashCode * 8191 + i_details.hashCode();

    hashCode = hashCode * 8191 + ((isSetIMap()) ? 131071 : 524287);
    if (isSetIMap())
      hashCode = hashCode * 8191 + i_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetObjMap()) ? 131071 : 524287);
    if (isSetObjMap())
      hashCode = hashCode * 8191 + obj_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetIList()) ? 131071 : 524287);
    if (isSetIList())
      hashCode = hashCode * 8191 + i_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Invoice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

      lastComparison = Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetDataColl(), other.isSetDataColl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataColl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_coll, other.data_coll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetData(), other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetLvlData(), other.isSetLvlData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLvlData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lvl_data, other.lvl_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetIDetails(), other.isSetIDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_details, other.i_details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetIMap(), other.isSetIMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_map, other.i_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetObjMap(), other.isSetObjMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_map, other.obj_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
      lastComparison = Boolean.compare(isSetIList(), other.isSetIList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i_list, other.i_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

    @org.apache.thrift.annotation.Nullable
    @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public _Fields[] getFields() {
    return _Fields.values();
  }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
    return metaDataMap;
    }

    @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
    }

    @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Invoice(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetDataColl()) {
      if (!first) sb.append(", ");
      sb.append("data_coll:");
      if (this.data_coll == null) {
        sb.append("null");
      } else {
        sb.append(this.data_coll);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lvl_data:");
    if (this.lvl_data == null) {
      sb.append("null");
    } else {
      sb.append(this.lvl_data);
    }
    first = false;
    if (isSetIDetails()) {
      if (!first) sb.append(", ");
      sb.append("i_details:");
      if (this.i_details == null) {
        sb.append("null");
      } else {
        sb.append(this.i_details);
      }
      first = false;
    }
    if (isSetIMap()) {
      if (!first) sb.append(", ");
      sb.append("i_map:");
      if (this.i_map == null) {
        sb.append("null");
      } else {
        sb.append(this.i_map);
      }
      first = false;
    }
    if (isSetObjMap()) {
      if (!first) sb.append(", ");
      sb.append("obj_map:");
      if (this.obj_map == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_map);
      }
      first = false;
    }
    if (isSetIList()) {
      if (!first) sb.append(", ");
      sb.append("i_list:");
      if (this.i_list == null) {
        sb.append("null");
      } else {
        sb.append(this.i_list);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (data != null) {
      data.validate();
    }
    if (lvl_data != null) {
      lvl_data.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

    private static class InvoiceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
    public InvoiceStandardScheme getScheme() {
      return new InvoiceStandardScheme();
    }
    }

    private static class InvoiceStandardScheme extends org.apache.thrift.scheme.StandardScheme<Invoice> {

        @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Invoice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new InvoiceStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_COLL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_coll = new IDataCollection();
              struct.data_coll.read(iprot);
              struct.setDataCollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data = new IData();
              struct.data.read(iprot);
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LVL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lvl_data = new ILvlData();
              struct.lvl_data.read(iprot);
              struct.setLvlDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.i_details = iprot.readString();
              struct.setIDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // I_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.i_map = new java.util.HashMap<Integer, IData>(2 * _map16.size);
                int _key17;
                  @org.apache.thrift.annotation.Nullable IData _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readI32();
                  _val18 = new IData();
                  _val18.read(iprot);
                  struct.i_map.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setIMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OBJ_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.obj_map = new java.util.HashMap<InvoiceStatus, IData>(2 * _map20.size);
                  @org.apache.thrift.annotation.Nullable InvoiceStatus _key21;
                  @org.apache.thrift.annotation.Nullable IData _val22;
                for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                {
                  _key21 = new InvoiceStatus();
                  _key21.read(iprot);
                  _val22 = new IData();
                  _val22.read(iprot);
                  struct.obj_map.put(_key21, _val22);
                }
                iprot.readMapEnd();
              }
              struct.setObjMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // I_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.i_list = new java.util.ArrayList<Integer>(_list24.size);
                int _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI32();
                  struct.i_list.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setIListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
        }

        @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Invoice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.data_coll != null) {
        if (struct.isSetDataColl()) {
          oprot.writeFieldBegin(DATA_COLL_FIELD_DESC);
          struct.data_coll.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        struct.data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.lvl_data != null) {
        oprot.writeFieldBegin(LVL_DATA_FIELD_DESC);
        struct.lvl_data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.i_details != null) {
        if (struct.isSetIDetails()) {
          oprot.writeFieldBegin(I_DETAILS_FIELD_DESC);
          oprot.writeString(struct.i_details);
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_map != null) {
        if (struct.isSetIMap()) {
          oprot.writeFieldBegin(I_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.i_map.size()));
              for (java.util.Map.Entry<Integer, IData> _iter27 : struct.i_map.entrySet())
            {
              oprot.writeI32(_iter27.getKey());
              _iter27.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.obj_map != null) {
        if (struct.isSetObjMap()) {
          oprot.writeFieldBegin(OBJ_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.obj_map.size()));
              for (java.util.Map.Entry<InvoiceStatus, IData> _iter28 : struct.obj_map.entrySet())
            {
              _iter28.getKey().write(oprot);
              _iter28.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.i_list != null) {
        if (struct.isSetIList()) {
          oprot.writeFieldBegin(I_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.i_list.size()));
            for (int _iter29 : struct.i_list)
            {
              oprot.writeI32(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    }

    private static class InvoiceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
    public InvoiceTupleScheme getScheme() {
      return new InvoiceTupleScheme();
    }
    }

    private static class InvoiceTupleScheme extends org.apache.thrift.scheme.TupleScheme<Invoice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Invoice struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetDataColl()) {
        optionals.set(2);
      }
      if (struct.isSetData()) {
        optionals.set(3);
      }
      if (struct.isSetLvlData()) {
        optionals.set(4);
      }
      if (struct.isSetIDetails()) {
        optionals.set(5);
      }
      if (struct.isSetIMap()) {
        optionals.set(6);
      }
      if (struct.isSetObjMap()) {
        optionals.set(7);
      }
      if (struct.isSetIList()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetDataColl()) {
        struct.data_coll.write(oprot);
      }
      if (struct.isSetData()) {
        struct.data.write(oprot);
      }
      if (struct.isSetLvlData()) {
        struct.lvl_data.write(oprot);
      }
      if (struct.isSetIDetails()) {
        oprot.writeString(struct.i_details);
      }
      if (struct.isSetIMap()) {
        {
          oprot.writeI32(struct.i_map.size());
            for (java.util.Map.Entry<Integer, IData> _iter30 : struct.i_map.entrySet())
          {
            oprot.writeI32(_iter30.getKey());
            _iter30.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetObjMap()) {
        {
          oprot.writeI32(struct.obj_map.size());
            for (java.util.Map.Entry<InvoiceStatus, IData> _iter31 : struct.obj_map.entrySet())
          {
            _iter31.getKey().write(oprot);
            _iter31.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIList()) {
        {
          oprot.writeI32(struct.i_list.size());
          for (int _iter32 : struct.i_list)
          {
            oprot.writeI32(_iter32);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Invoice struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = new InvoiceStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.data_coll = new IDataCollection();
        struct.data_coll.read(iprot);
        struct.setDataCollIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data = new IData();
        struct.data.read(iprot);
        struct.setDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lvl_data = new ILvlData();
        struct.lvl_data.read(iprot);
        struct.setLvlDataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.i_details = iprot.readString();
        struct.setIDetailsIsSet(true);
      }
      if (incoming.get(6)) {
          {
              org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT);
              struct.i_map = new java.util.HashMap<Integer, IData>(2 * _map33.size);
          int _key34;
              @org.apache.thrift.annotation.Nullable IData _val35;
          for (int _i36 = 0; _i36 < _map33.size; ++_i36)
          {
            _key34 = iprot.readI32();
            _val35 = new IData();
            _val35.read(iprot);
            struct.i_map.put(_key34, _val35);
          }
        }
        struct.setIMapIsSet(true);
      }
      if (incoming.get(7)) {
          {
              org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT);
              struct.obj_map = new java.util.HashMap<InvoiceStatus, IData>(2 * _map37.size);
              @org.apache.thrift.annotation.Nullable InvoiceStatus _key38;
              @org.apache.thrift.annotation.Nullable IData _val39;
          for (int _i40 = 0; _i40 < _map37.size; ++_i40)
          {
            _key38 = new InvoiceStatus();
            _key38.read(iprot);
            _val39 = new IData();
            _val39.read(iprot);
            struct.obj_map.put(_key38, _val39);
          }
        }
        struct.setObjMapIsSet(true);
      }
      if (incoming.get(8)) {
          {
              org.apache.thrift.protocol.TList _list41 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
              struct.i_list = new java.util.ArrayList<Integer>(_list41.size);
          int _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = iprot.readI32();
            struct.i_list.add(_elem42);
          }
        }
        struct.setIListIsSet(true);
      }
    }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

